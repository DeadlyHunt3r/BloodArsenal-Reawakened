plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.0.+'
}

group = package_group
version = "${mod_version}+mc${mc_version}-b${build_number}"

base {
    archivesName = mod_name
}

java {
    toolchain { languageVersion = JavaLanguageVersion.of(17) }
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven { url "https://maven.minecraftforge.net" }

    // JEI – offizielles Repo
    maven {
        name = "Progwml6 JEI"
        url = "https://dvs1.progwml6.com/files/maven"
        content { includeGroup "mezz.jei" }
    }

    // Patchouli etc. (JEI hier explizit ausschließen)
    maven {
        url = "https://maven.blamejared.com"
        content { excludeGroup "mezz.jei" }
    }
    maven { url "https://www.cursemaven.com" }
}

minecraft {

    mappings channel: 'official', version: mc_version

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            args '--username', 'Dev'
            mods {
                "${mod_id}" { source sourceSets.main }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" { source sourceSets.main }
            }
        }
        data {
            workingDirectory project.file('run')
            args '--mod', mod_id,
                 '--all',
                 '--existing', file('src/main/resources/'),
                 '--existing', file('src/generated/resources/'),
                 '--output',   file('src/generated/resources/')
            mods {
                "${mod_id}" { source sourceSets.main }
            }
        }
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_artifact}"

    // Patchouli
    compileOnly "vazkii.patchouli:Patchouli:${patchouli_version}:api"
    runtimeOnly  "vazkii.patchouli:Patchouli:${patchouli_version}"

    // compileOnly "mezz.jei:jei-${jei_mc}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${jei_mc}-forge-api:${jei_version}"
    // runtimeOnly  "mezz.jei:jei-${jei_mc}-forge:${jei_version}"

   // curios / bloodmagic 
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 17
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

processResources {

    def replaceProps = [
        mod_id       : project.findProperty('mod_id'),
        mod_name     : project.findProperty('mod_name'),
        mod_version  : project.version,
        mc_version   : project.findProperty('mc_version')
    ]
    inputs.properties replaceProps
    filesMatching(['META-INF/mods.toml','pack.mcmeta']) {
        expand replaceProps
    }
}

jar {
    manifest {
        attributes(
            "Specification-Title": mod_id,
            "Specification-Vendor": mod_id,
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor": mod_id,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }
    exclude "**/*.bat", "**/*.psd", "**/*.exe"
}

publishing {
    publications {
        mavenJava(MavenPublication) { from components.java }
    }
    repositories {
        maven { url "file:///${project.projectDir}/mcmodsrepo" }
    }
}
